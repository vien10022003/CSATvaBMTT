// H√†m ki·ªÉm tra s·ªë nguy√™n t·ªë
function isPrime(num) {
    if (num < 2) return false;
    if (num === 2 || num === 3) return true;
    if (num % 2 === 0) return false;
    for (let i = 3; i * i <= num; i += 2) {
        if (num % i === 0) return false;
    }
    return true;
}

// H√†m t·∫°o s·ªë nguy√™n t·ªë ng·∫´u nhi√™n trong kho·∫£ng [min, max]
function generateRandomPrime(min, max) {
    let prime;
    do {
        prime = Math.floor(Math.random() * (max - min) + min);
    } while (!isPrime(prime));
    return prime;
}

// H√†m t√≠nh GCD (∆Ø·ªõc s·ªë chung l·ªõn nh·∫•t)
function gcd(a, b) {
    while (b !== 0) {
        [a, b] = [b, a % b];
    }
    return a;
}

// H√†m t√≠nh s·ªë ngh·ªãch ƒë·∫£o modulo (D√πng thu·∫≠t to√°n Euclid m·ªü r·ªông)
function modInverse(e, phi) {
    let m0 = phi, x0 = 0, x1 = 1;
    while (e > 1) {
        let q = Math.floor(e / phi);
        [e, phi] = [phi, e % phi];
        [x0, x1] = [x1 - q * x0, x0];
    }
    return x1 < 0 ? x1 + m0 : x1;
}

function modPow(base, exp, mod) {
    let result = 1;
    base = base % mod; // ƒê·∫£m b·∫£o base lu√¥n nh·ªè h∆°n mod (tr√°nh tr∆∞·ªùng h·ª£p base l·ªõn h∆°n mod)

    while (exp > 0) {
        if (exp % 2 === 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;
        exp = Math.floor(exp / 2);
    }
    return result;
}


// 1Ô∏è‚É£ T·∫°o kh√≥a ri√™ng RSA
export function generatePrivateKey() {
    const p = generateRandomPrime(50, 1000);
    const q = generateRandomPrime(50, 1000);
    const n = p * q;
    const phi = (p - 1) * (q - 1);

    let e = 3;
    while (gcd(e, phi) !== 1) {
        e++; // Ch·ªçn `e` ph√π h·ª£p
    }

    const d = modInverse(e, phi);

    return { d, n, e, p, q, phi };
}


// 2Ô∏è‚É£ T·∫°o kh√≥a c√¥ng khai t·ª´ private key
export function generatePublicKey(privateKey) {
    return { e: privateKey.e, n: privateKey.n };
}


// 3Ô∏è‚É£ K√Ω s·ªë
export function signMessage(message, privateKey) {
    return modPow(message, privateKey.d, privateKey.n); // M√£ h√≥a b·∫±ng kh√≥a ri√™ng
}

// 4Ô∏è‚É£ X√°c minh ch·ªØ k√Ω
export function verifySignature(signature, message, publicKey) {
    console.log(signature, message, publicKey);
    const messageCheck = modPow(signature, publicKey.e, publicKey.n); // Gi·∫£i m√£ ch·ªØ k√Ω
    console.log(messageCheck);
    return message == messageCheck; // Ki·ªÉm tra t√≠nh h·ª£p l·ªá
}

export function extractNumberFromString(str) {
    let numStr = "";

    // Duy·ªát qua t·ªëi ƒëa 10 k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa chu·ªói, chuy·ªÉn th√†nh m√£ ASCII v√† n·ªëi l·∫°i
    for (let i = 0; i < Math.min(str.length, 10); i++) {
        let charCode = str.charCodeAt(i);
        numStr += charCode; // N·ªëi m√£ ASCII c·ªßa t·ª´ng k√Ω t·ª±
    }

    // Chuy·ªÉn chu·ªói s·ªë th√†nh m·ªôt s·ªë nguy√™n
    let number = parseInt(numStr, 10);

    // ƒê·∫£m b·∫£o s·ªë nh·ªè h∆°n 500
    return number % 500;
}



// ‚úÖ Ki·ªÉm th·ª≠
const privateKey = generatePrivateKey();
const publicKey = generatePublicKey(privateKey);

console.log("üîπ Private Key:", privateKey);
console.log("üîπ Public Key:", publicKey);

const message = Math.floor(Math.random() * 100); // Gi·∫£ s·ª≠ th√¥ng ƒëi·ªáp l√† s·ªë nguy√™n
const signature = signMessage(message, privateKey);

console.log(`‚úçÔ∏è Ch·ªØ k√Ω s·ªë cho th√¥ng ƒëi·ªáp ${message}: ${signature}`);
console.log(`üîç X√°c minh ch·ªØ k√Ω:`, verifySignature(signature, message, publicKey) ? "‚úÖ H·ª£p l·ªá" : "‚ùå Kh√¥ng h·ª£p l·ªá");
